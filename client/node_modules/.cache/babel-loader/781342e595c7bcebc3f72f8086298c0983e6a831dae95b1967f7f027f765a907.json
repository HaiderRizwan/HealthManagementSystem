{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Inspire Uplift\\\\Desktop\\\\web\\\\healthmanagementsystem\\\\Health-Management-System-main\\\\client\\\\src\\\\components\\\\profiles\\\\Client\\\\Appointments.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { useNavigate } from 'react-router-dom';\nimport DoctorList from './DoctorList';\nimport ClientBookAppointment from './ClientBookAppointment';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Appointments = ({\n  userId\n}) => {\n  _s();\n  const navigate = useNavigate();\n  const [doctors, setDoctors] = useState([]);\n  const [selectedDoctor, setSelectedDoctor] = useState(null);\n  const [doctorAvailableDates, setDoctorAvailableDates] = useState([]);\n  const [selectedDate, setSelectedDate] = useState(null);\n  useEffect(() => {\n    const fetchDoctors = async () => {\n      try {\n        const response = await axios.get('http://localhost:5000/api/doctors_list');\n        setDoctors(response.data);\n      } catch (error) {\n        console.error('Error fetching doctors:', error);\n      }\n    };\n    fetchDoctors();\n  }, []);\n  const fetchAvailableDates = async doctorId => {\n    try {\n      console.log('Fetching available dates for Doctor:', doctorId);\n      const response = await axios.get(`http://localhost:5000/doctor/${doctorId}/available_dates`);\n      console.log('Available dates response:', response.data);\n      if (Array.isArray(response.data) && response.data.length === 0) {\n        console.log('No available dates found for this doctor');\n        alert('This doctor has not set any available dates yet. Please select another doctor.');\n      }\n      setDoctorAvailableDates(response.data);\n    } catch (error) {\n      console.error('Error fetching available dates:', error);\n      alert('Error fetching available dates. Please try again later.');\n    }\n  };\n  useEffect(() => {\n    console.log('Doctor available dates:', doctorAvailableDates);\n    console.log('Client ID:', userId);\n  }, [doctorAvailableDates]);\n  const handleBookAppointment = doctor => {\n    console.log('Book appointment for doctor:', doctor);\n    console.log('Doctor ID:', doctor.user._id);\n    setSelectedDoctor(doctor);\n    if (doctor && doctor.user._id) {\n      fetchAvailableDates(doctor.user._id);\n      console.log('Available dates in book:', doctorAvailableDates);\n    }\n  };\n  const handleCancelAppointment = () => {\n    setSelectedDoctor(null);\n    setSelectedDate(null);\n  };\n  // Function to check availability of time slots for a specific date and doctor\n  const checkAvailability = async (doctorId, date) => {\n    try {\n      const response = await axios.get('http://localhost:5000/api/check_availability', {\n        params: {\n          doctorId,\n          date\n        }\n      });\n      return response.data.availableSlots;\n    } catch (error) {\n      console.error('Error checking availability:', error);\n      return [];\n    }\n  };\n  const handleBookAppointmentForDoctor = async clientInfo => {\n    try {\n      console.log(`Book appointment for Doctor: ${selectedDoctor.name} Id: ${selectedDoctor.user._id}, Date: ${selectedDate}, Client: ${clientInfo.name}`);\n\n      // Check availability of time slots\n      const availableSlots = await checkAvailability(selectedDoctor.user._id, selectedDate);\n\n      // Find an available time slot to book the appointment\n      if (availableSlots.length > 0) {\n        const timeSlotId = availableSlots[0]._id; // Assuming you want to book the first available slot\n\n        // Make API call to book appointment\n        console.log('request parameters to book appointment:', selectedDoctor.user._id, clientInfo.client_id, selectedDate, timeSlotId);\n        const response = await axios.post('http://localhost:5000/api/book_appointment', {\n          doctorId: selectedDoctor.user._id,\n          patientId: clientInfo.client_id,\n          // Assuming clientInfo contains patient ID\n          date: selectedDate,\n          timeSlotId\n        });\n        console.log('Appointment booked successfully:', response.data);\n\n        // Clear the selected doctor\n        setSelectedDoctor(null);\n      } else {\n        console.log('No available time slots for booking.');\n      }\n    } catch (error) {\n      console.error('Error booking appointment:', error);\n      // Handle error\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"appointments\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Appointments\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this), selectedDoctor && /*#__PURE__*/_jsxDEV(ClientBookAppointment, {\n      doctor: selectedDoctor,\n      availableDates: doctorAvailableDates,\n      userId: userId,\n      onBookAppointment: handleBookAppointmentForDoctor,\n      onCancel: handleCancelAppointment,\n      onDateSelect: setSelectedDate // Pass a function to set selectedDate\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(DoctorList, {\n      doctors: doctors,\n      handleBookAppointment: handleBookAppointment\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 111,\n    columnNumber: 5\n  }, this);\n};\n_s(Appointments, \"i2ubEkNaCQ3cSGTKv1BLgPUEyN0=\", false, function () {\n  return [useNavigate];\n});\n_c = Appointments;\nexport default Appointments;\nvar _c;\n$RefreshReg$(_c, \"Appointments\");","map":{"version":3,"names":["React","useState","useEffect","axios","useNavigate","DoctorList","ClientBookAppointment","jsxDEV","_jsxDEV","Appointments","userId","_s","navigate","doctors","setDoctors","selectedDoctor","setSelectedDoctor","doctorAvailableDates","setDoctorAvailableDates","selectedDate","setSelectedDate","fetchDoctors","response","get","data","error","console","fetchAvailableDates","doctorId","log","Array","isArray","length","alert","handleBookAppointment","doctor","user","_id","handleCancelAppointment","checkAvailability","date","params","availableSlots","handleBookAppointmentForDoctor","clientInfo","name","timeSlotId","client_id","post","patientId","className","children","fileName","_jsxFileName","lineNumber","columnNumber","availableDates","onBookAppointment","onCancel","onDateSelect","_c","$RefreshReg$"],"sources":["C:/Users/Inspire Uplift/Desktop/web/healthmanagementsystem/Health-Management-System-main/client/src/components/profiles/Client/Appointments.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { useNavigate } from 'react-router-dom';\nimport DoctorList from './DoctorList';\nimport ClientBookAppointment from './ClientBookAppointment';\n\nconst Appointments = ({ userId }) => {\n  const navigate = useNavigate();\n  const [doctors, setDoctors] = useState([]);\n  const [selectedDoctor, setSelectedDoctor] = useState(null);\n  const [doctorAvailableDates, setDoctorAvailableDates] = useState([]);\n  const [selectedDate, setSelectedDate] = useState(null);\n\n  useEffect(() => {\n    const fetchDoctors = async () => {\n      try {\n        const response = await axios.get('http://localhost:5000/api/doctors_list');\n        setDoctors(response.data);\n      } catch (error) {\n        console.error('Error fetching doctors:', error);\n      }\n    };\n    fetchDoctors();\n  }, []);\n\n  const fetchAvailableDates = async (doctorId) => {\n    try {\n      console.log('Fetching available dates for Doctor:', doctorId);\n      const response = await axios.get(`http://localhost:5000/doctor/${doctorId}/available_dates`);\n      console.log('Available dates response:', response.data);\n      \n      if (Array.isArray(response.data) && response.data.length === 0) {\n        console.log('No available dates found for this doctor');\n        alert('This doctor has not set any available dates yet. Please select another doctor.');\n      }\n      \n      setDoctorAvailableDates(response.data);\n    } catch (error) {\n      console.error('Error fetching available dates:', error);\n      alert('Error fetching available dates. Please try again later.');\n    }\n  };\n  \n  useEffect(() => {\n    console.log('Doctor available dates:', doctorAvailableDates);\n    console.log('Client ID:', userId);\n  }, [doctorAvailableDates]);\n  \n\n  const handleBookAppointment = (doctor) => {\n    console.log('Book appointment for doctor:', doctor);\n    console.log('Doctor ID:', doctor.user._id);\n    setSelectedDoctor(doctor);\n    if (doctor && doctor.user._id) {\n      fetchAvailableDates(doctor.user._id);\n      console.log('Available dates in book:', doctorAvailableDates);\n    }\n  };\n  \n\n  const handleCancelAppointment = () => {\n    setSelectedDoctor(null);\n    setSelectedDate(null);\n  };\n  // Function to check availability of time slots for a specific date and doctor\n  const checkAvailability = async (doctorId, date) => {\n    try {\n      const response = await axios.get('http://localhost:5000/api/check_availability', {\n        params: { doctorId, date }\n      });\n      return response.data.availableSlots;\n    } catch (error) {\n      console.error('Error checking availability:', error);\n      return [];\n    }\n  };\n  const handleBookAppointmentForDoctor = async (clientInfo) => {\n    try {\n      console.log(`Book appointment for Doctor: ${selectedDoctor.name} Id: ${selectedDoctor.user._id}, Date: ${selectedDate}, Client: ${clientInfo.name}`);\n      \n      // Check availability of time slots\n      const availableSlots = await checkAvailability(selectedDoctor.user._id, selectedDate);\n      \n      // Find an available time slot to book the appointment\n      if (availableSlots.length > 0) {\n        const timeSlotId = availableSlots[0]._id; // Assuming you want to book the first available slot\n  \n        // Make API call to book appointment\n        console.log('request parameters to book appointment:', selectedDoctor.user._id, clientInfo.client_id, selectedDate, timeSlotId)\n        const response = await axios.post('http://localhost:5000/api/book_appointment', {\n          doctorId: selectedDoctor.user._id,\n          patientId: clientInfo.client_id, // Assuming clientInfo contains patient ID\n          date: selectedDate,\n          timeSlotId\n        });\n  \n        console.log('Appointment booked successfully:', response.data);\n  \n        // Clear the selected doctor\n        setSelectedDoctor(null);\n      } else {\n        console.log('No available time slots for booking.');\n      }\n    } catch (error) {\n      console.error('Error booking appointment:', error);\n      // Handle error\n    }\n  };\n\n  return (\n    <section className=\"appointments\">\n      <h2>Appointments</h2>\n      {selectedDoctor && (\n        <ClientBookAppointment\n          doctor={selectedDoctor}\n          availableDates={doctorAvailableDates}\n          userId={userId}\n          onBookAppointment={handleBookAppointmentForDoctor}\n          onCancel={handleCancelAppointment}\n          onDateSelect={setSelectedDate} // Pass a function to set selectedDate\n        />\n      )}\n      <DoctorList doctors={doctors} handleBookAppointment={handleBookAppointment} />\n    </section>\n  );\n};\n\nexport default Appointments;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,OAAOC,UAAU,MAAM,cAAc;AACrC,OAAOC,qBAAqB,MAAM,yBAAyB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5D,MAAMC,YAAY,GAAGA,CAAC;EAAEC;AAAO,CAAC,KAAK;EAAAC,EAAA;EACnC,MAAMC,QAAQ,GAAGR,WAAW,CAAC,CAAC;EAC9B,MAAM,CAACS,OAAO,EAAEC,UAAU,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACc,cAAc,EAAEC,iBAAiB,CAAC,GAAGf,QAAQ,CAAC,IAAI,CAAC;EAC1D,MAAM,CAACgB,oBAAoB,EAAEC,uBAAuB,CAAC,GAAGjB,QAAQ,CAAC,EAAE,CAAC;EACpE,MAAM,CAACkB,YAAY,EAAEC,eAAe,CAAC,GAAGnB,QAAQ,CAAC,IAAI,CAAC;EAEtDC,SAAS,CAAC,MAAM;IACd,MAAMmB,YAAY,GAAG,MAAAA,CAAA,KAAY;MAC/B,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMnB,KAAK,CAACoB,GAAG,CAAC,wCAAwC,CAAC;QAC1ET,UAAU,CAACQ,QAAQ,CAACE,IAAI,CAAC;MAC3B,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;MACjD;IACF,CAAC;IACDJ,YAAY,CAAC,CAAC;EAChB,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMM,mBAAmB,GAAG,MAAOC,QAAQ,IAAK;IAC9C,IAAI;MACFF,OAAO,CAACG,GAAG,CAAC,sCAAsC,EAAED,QAAQ,CAAC;MAC7D,MAAMN,QAAQ,GAAG,MAAMnB,KAAK,CAACoB,GAAG,CAAC,gCAAgCK,QAAQ,kBAAkB,CAAC;MAC5FF,OAAO,CAACG,GAAG,CAAC,2BAA2B,EAAEP,QAAQ,CAACE,IAAI,CAAC;MAEvD,IAAIM,KAAK,CAACC,OAAO,CAACT,QAAQ,CAACE,IAAI,CAAC,IAAIF,QAAQ,CAACE,IAAI,CAACQ,MAAM,KAAK,CAAC,EAAE;QAC9DN,OAAO,CAACG,GAAG,CAAC,0CAA0C,CAAC;QACvDI,KAAK,CAAC,gFAAgF,CAAC;MACzF;MAEAf,uBAAuB,CAACI,QAAQ,CAACE,IAAI,CAAC;IACxC,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;MACvDQ,KAAK,CAAC,yDAAyD,CAAC;IAClE;EACF,CAAC;EAED/B,SAAS,CAAC,MAAM;IACdwB,OAAO,CAACG,GAAG,CAAC,yBAAyB,EAAEZ,oBAAoB,CAAC;IAC5DS,OAAO,CAACG,GAAG,CAAC,YAAY,EAAEnB,MAAM,CAAC;EACnC,CAAC,EAAE,CAACO,oBAAoB,CAAC,CAAC;EAG1B,MAAMiB,qBAAqB,GAAIC,MAAM,IAAK;IACxCT,OAAO,CAACG,GAAG,CAAC,8BAA8B,EAAEM,MAAM,CAAC;IACnDT,OAAO,CAACG,GAAG,CAAC,YAAY,EAAEM,MAAM,CAACC,IAAI,CAACC,GAAG,CAAC;IAC1CrB,iBAAiB,CAACmB,MAAM,CAAC;IACzB,IAAIA,MAAM,IAAIA,MAAM,CAACC,IAAI,CAACC,GAAG,EAAE;MAC7BV,mBAAmB,CAACQ,MAAM,CAACC,IAAI,CAACC,GAAG,CAAC;MACpCX,OAAO,CAACG,GAAG,CAAC,0BAA0B,EAAEZ,oBAAoB,CAAC;IAC/D;EACF,CAAC;EAGD,MAAMqB,uBAAuB,GAAGA,CAAA,KAAM;IACpCtB,iBAAiB,CAAC,IAAI,CAAC;IACvBI,eAAe,CAAC,IAAI,CAAC;EACvB,CAAC;EACD;EACA,MAAMmB,iBAAiB,GAAG,MAAAA,CAAOX,QAAQ,EAAEY,IAAI,KAAK;IAClD,IAAI;MACF,MAAMlB,QAAQ,GAAG,MAAMnB,KAAK,CAACoB,GAAG,CAAC,8CAA8C,EAAE;QAC/EkB,MAAM,EAAE;UAAEb,QAAQ;UAAEY;QAAK;MAC3B,CAAC,CAAC;MACF,OAAOlB,QAAQ,CAACE,IAAI,CAACkB,cAAc;IACrC,CAAC,CAAC,OAAOjB,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;MACpD,OAAO,EAAE;IACX;EACF,CAAC;EACD,MAAMkB,8BAA8B,GAAG,MAAOC,UAAU,IAAK;IAC3D,IAAI;MACFlB,OAAO,CAACG,GAAG,CAAC,gCAAgCd,cAAc,CAAC8B,IAAI,QAAQ9B,cAAc,CAACqB,IAAI,CAACC,GAAG,WAAWlB,YAAY,aAAayB,UAAU,CAACC,IAAI,EAAE,CAAC;;MAEpJ;MACA,MAAMH,cAAc,GAAG,MAAMH,iBAAiB,CAACxB,cAAc,CAACqB,IAAI,CAACC,GAAG,EAAElB,YAAY,CAAC;;MAErF;MACA,IAAIuB,cAAc,CAACV,MAAM,GAAG,CAAC,EAAE;QAC7B,MAAMc,UAAU,GAAGJ,cAAc,CAAC,CAAC,CAAC,CAACL,GAAG,CAAC,CAAC;;QAE1C;QACAX,OAAO,CAACG,GAAG,CAAC,yCAAyC,EAAEd,cAAc,CAACqB,IAAI,CAACC,GAAG,EAAEO,UAAU,CAACG,SAAS,EAAE5B,YAAY,EAAE2B,UAAU,CAAC;QAC/H,MAAMxB,QAAQ,GAAG,MAAMnB,KAAK,CAAC6C,IAAI,CAAC,4CAA4C,EAAE;UAC9EpB,QAAQ,EAAEb,cAAc,CAACqB,IAAI,CAACC,GAAG;UACjCY,SAAS,EAAEL,UAAU,CAACG,SAAS;UAAE;UACjCP,IAAI,EAAErB,YAAY;UAClB2B;QACF,CAAC,CAAC;QAEFpB,OAAO,CAACG,GAAG,CAAC,kCAAkC,EAAEP,QAAQ,CAACE,IAAI,CAAC;;QAE9D;QACAR,iBAAiB,CAAC,IAAI,CAAC;MACzB,CAAC,MAAM;QACLU,OAAO,CAACG,GAAG,CAAC,sCAAsC,CAAC;MACrD;IACF,CAAC,CAAC,OAAOJ,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;MAClD;IACF;EACF,CAAC;EAED,oBACEjB,OAAA;IAAS0C,SAAS,EAAC,cAAc;IAAAC,QAAA,gBAC/B3C,OAAA;MAAA2C,QAAA,EAAI;IAAY;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EACpBxC,cAAc,iBACbP,OAAA,CAACF,qBAAqB;MACpB6B,MAAM,EAAEpB,cAAe;MACvByC,cAAc,EAAEvC,oBAAqB;MACrCP,MAAM,EAAEA,MAAO;MACf+C,iBAAiB,EAAEd,8BAA+B;MAClDe,QAAQ,EAAEpB,uBAAwB;MAClCqB,YAAY,EAAEvC,eAAgB,CAAC;IAAA;MAAAgC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAChC,CACF,eACD/C,OAAA,CAACH,UAAU;MAACQ,OAAO,EAAEA,OAAQ;MAACqB,qBAAqB,EAAEA;IAAsB;MAAAkB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACvE,CAAC;AAEd,CAAC;AAAC5C,EAAA,CAvHIF,YAAY;EAAA,QACCL,WAAW;AAAA;AAAAwD,EAAA,GADxBnD,YAAY;AAyHlB,eAAeA,YAAY;AAAC,IAAAmD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}